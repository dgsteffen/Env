;; Keep Emacs from executing file local variables.include
;; (this is also in the site-init.el file loaded at emacs dump time.)
;(setq inhibit-local-variables t  ; v18
;      enable-local-variables nil ; v19
;      enable-local-eval nil)     ; v19


(setq default-major-mode 'text-mode)    ; new buffers are text mode by default
(setq case-fold-search t)               ; make searches case sensitive
(setq scroll-step 1)                    ; scroll one line off screen
(setq line-number-mode t)               ; line numbers always on
(setq column-number-mode t)             ; column numbers always on


(setq inhibit-splash-screen t) ; turn off the damned spash screen
(fset 'yes-or-no-p 'y-or-n-p) ; stop forcing me to spell out "yes"

(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(setq-default auto-fill-hook 'do-auto-fill)

(mouse-wheel-mode t)


;; Highlights current line
;(global-hl-line-mode +1)
;(set-face-background hl-line-face "#333964")


;; turn off the tool bar
(tool-bar-mode 0)

;; kill the auto save

(setq auto-save-default nil)

;; Hmm -- mouse buffer menu (ctrl-left click)
;; "ctrl - left click" buffer menu: increase number of items shown
;; set max length of this list. default 20. see next.
(setq mouse-buffer-menu-maxlen 30)
;; set # buffer in a mode before grouping begins. takes precedence over previous
;; set to 1 to always group by mode. default 4
(setq mouse-buffer-menu-mode-mult 8)


;; Cause the ron to be highlighted and prevent region-based commands
;; from running when the mark isn't active.

(pending-delete-mode t)
 (setq transient-mark-mode t)


;; Don't split the frame when starting with multiple files
(add-hook 'emacs-startup-hook
          (lambda () (delete-other-windows)) t)




;;
;;
(require 'ido)
(ido-mode t)

(if window-system
   (progn
      (setq default-frame-alist
            '((width . 121)
              (height . 52)
              (foreground-color . "White")
              (background-color . "black")
              (cursor-color . "Green")
              ))))

(add-to-list 'default-frame-alist '(foreground-color . "green"))
(add-to-list 'default-frame-alist '(background-color . "#000000"))


;(require 'sr-speedbar)

;(when window-system; ; start speedbar only if windows
;  (sr-speedbar-open)
;  (setq sr-sbeedbar-width 20)
;  (speedbar t)
;  )



;; show parens
(show-paren-mode t)


;; Below are changes taken from the tutor .emacs file
;; Added by Craig Ruefenacht

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;
;;;; This provides customized support for writing programs in different kinds
;;;; of programming languages.
;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Load the C++ and C editing modes and specify which file extensions
;; correspond to which modes.
;; (autoload 'python-mode "python-mode" "Python editing mode." t)
;;     (setq auto-mode-alist
;;            (cons '("\\.py$" . python-mode) auto-mode-alist))
;;      (setq interpreter-mode-alist
;;            (cons '("python" . python-mode) interpreter-mode-alist))

(autoload 'c++-mode "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode "c-mode" "C Editing Mode"   t)
(setq auto-mode-alist
      (append '(("\\.C\\'" . c++-mode)
                ("\\.cc\\'" . c++-mode)
                ("\\.cpp\\'" . c++-mode)
                ("\\.cs\\'" . c++-mode)
                ("\\.ii\\'" . c++-mode)
                ("\\.c\\'" . c++-mode)
                ("\\.h\\'"  . c++-mode)
                ("\\.hxx\\'"  . c++-mode)
                ("\\.cc$" . c++-mode)
                ("\\.hh$" . c++-mode)
                ("\\.c$"  . c++-mode)
                ("\\.t$"  . c++-mode)
                ("\\.h$"  . c++-mode)
                ("\\.pl$" . cperl-mode)
                ("makefile" . makefile-mode)
                )
              auto-mode-alist))

(setq-default indent-tabs-mode nil)


(which-function-mode 1)

(setq make-backup-files nil)


(defconst my-c-style
  '(
    (c-tab-always-indent       . t)
    (c-hanging-braces-alist    . (;(substatement-open after)
                                  ;(brace-list-open)
                                  (class-open after)
                                  (class-close)
                                  (namespace-open)
                                  ;(inline-open)
                                  (inline-close)))
    (c-hanging-colons-alist    . ((member-init-intro)
                                  (inher-intro)
                                  (case-label after)
                                  (access-label after)))
    (c-cleanup-list            . ((brace-else-brace)
                                  (brace-elseif-brace)
                                  (defun-close-semi)
                                  (scope-operator)))
    (c-set-offset 'substatement-open 0)
    (c-set-offset 'inline-open 0)

    )
  "My C++ Programming Style")


;; It gripes me that I have to write this function myself... argh
(defun c-lineup-underprev (langelem)
  (save-excursion
    (let* ((relpos (cdr langelem))
           (curcol (progn (goto-char relpos)
                          (current-column))))
;      (re-search-forward "[_A-Za-z]+\s" (c-point 'eol))
      (re-search-forward "[_A-Za-z]+\s" (c-point 'eol) 'move)
      (right-char)
      (goto-char (match-end 0))
      (- (current-column) curcol)
      )
    )
)



(defun my-c-mode-common-hook ()
  (c-add-style "Dave" my-c-style t)
  (c-set-style "Dave")
  (c-set-style "linux")
  (setq c-default-style "linux")
  (setq c-basic-offset 3)
  (setq font-lock-use-fonts t)
  (setq font-lock-use-colors nil)
  (setq font-lock-use-maximal-decoration t)
  (setq font-lock-auto-fontify t)
  (c-toggle-auto-hungry-state 1)
  (setq show-trailing-whitespace nil)
  (setq indent-tabs-mode nil)
  (set-language-environment '"UTF-8")
  (c-toggle-auto-newline nil)
  (c-set-offset 'namespace-open 0)
  (c-set-offset 'innamespace 0)
  (setq fill-column 100 )
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'inline-open 0)
)

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c-mode-common-hook 'turn-on-auto-fill)




;; This function is used in various programming language mode hooks below.  It
;; does indentation after every newline when writing a program.

;(defun newline-indents ()
;  "Bind Return to `newline-and-indent' in the local keymap."
;  (local-set-key "\C-m" 'newline-and-indent))


;; Tell Emacs to use the function above in certain editing modes.

;(add-hook 'lisp-mode-hook             (function newline-indents))
;(add-hook 'emacs-lisp-mode-hook       (function newline-indents))
;(add-hook 'lisp-interaction-mode-hook (function newline-indents))
;(add-hook 'scheme-mode-hook           (function newline-indents))
;(add-hook 'c-mode-hook                (function newline-indents))
;(add-hook 'c++-mode-hook              (function newline-indents))
;(add-hook 'java-mode-hook             (function newline-indents))


;; Fortran mode provides a special newline-and-indent function.

;(add-hook 'fortran-mode-hook
;         (function (lambda ()
;                     (local-set-key "\C-m" 'fortran-indent-new-line))))


;; Text-based modes (including mail, TeX, and LaTeX modes) are auto-filled.

(add-hook 'text-mode-hook (function turn-on-auto-fill))


;;
;; Finally look for .customs.emacs file and load it if found

(if "~/.customs.emacs"
    (load "~/.customs.emacs" t t))

;; Art: added with v. 23.1 to make spacebar complete filenames (8/17/2009)
(progn
 (define-key minibuffer-local-completion-map " " 'minibuffer-complete-word)
 (define-key minibuffer-local-filename-completion-map " " 'minibuffer-complete-word)
 (define-key minibuffer-local-must-match-filename-map " " 'minibuffer-complete-word))


(defun dave-cleanup ()
  "indent, untabify, whitespace cleanup"
  (interactive)
;  (push-mark (point))
;  (push-mark (point-max) nil t)
  ( indent-region (point-min) (point-max) nil)
  ( untabify (point-min) (point-max))
  ( whitespace-cleanup)
)

(fset 'squash-commit
   [?\C-a delete delete delete delete ?s left down])

(fset 'fixup-commit
   [?\C-a delete delete delete delete ?f left down])

(fset 'nixdos
   [?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?s ?t ?r ?i ?n ?g return ?\C-q ?\C-m return return ?\C-x])


(fset 'type_include_sys
 "#include <")

(fset 'type_include_norm
 "#include \"")

(fset 'itemz
   [?\\ ?b ?e ?g ?i ?n ?\{ ?i ?t ?e ?m ?i ?z ?e ?\} ?\[ ?< ?+ ?- ?> ?\] return ?\\ ?e ?n ?d ?\{ ?i ?t ?e ?m ?i ?z ?e ?\} ?\C-a return up])

(fset 'vrbtm
   [?\{ ?\\ ?s ?c ?r ?i ?p ?t ?s ?i ?z ?e ?\\ ?b ?e ?g ?i ?n ?\{ ?v ?e ?r ?b ?a ?t ?i ?m ?\} return ?\\ ?e ?n ?d ?\{ ?v ?a ?r backspace backspace ?e ?r ?b ?a ?t ?i ?m ?\} return ?\} left up return up])


;(global-set-key [M-%] 'query-replace)

(global-set-key [f1] 'auto-fill-mode )
(global-set-key [S-f1] 'type_include_norm )
(global-set-key [C-f1] 'type_include_sys )

(global-set-key [f2] 'whitespace-cleanup        )
(global-set-key [C-f2] 'nixdos        )

(global-set-key [  f3] 'indent-region           )
(global-set-key [C-f3] 'dave-cleanup            )

(global-set-key [  f4] 'delete-other-windows    )
(global-set-key [M-f4] 'ctypes-define-type      )
(global-set-key [C-f4] 'sr-speedbar-toggle      )

(global-set-key [f5] 'replace-string            )
(global-set-key [M-f5] 'query-replace           )

(global-set-key [  f6] 'make-frame-command        )
(global-set-key [C-f6] 'fixup-commit           )
(global-set-key [C-f7] 'rgrep                   )
(global-set-key [  f7] 'squash-commit           )
(global-set-key [f8] 'compile     )
(global-set-key [f9] 'next-error                )
(global-set-key [f10] 'goto-line                )

(global-set-key [f11]  'align-regexp  )

(global-set-key [f12] 'call-last-kbd-macro      )



(global-set-key [?\s-\H- ] 'underscore-dammit-str)

(global-set-key [(meta g)] 'goto-line)
(global-set-key [(meta c)] 'delete-indentation       )

(global-set-key "\C-z" 'undo)

(global-set-key [(ctrl \;)] 'dabbrev-expand )

(global-set-key (kbd "C-c C-x") 'comment-region)
(global-set-key (kbd "C-c C-z") 'uncomment-region)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Addl C++ Types


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Colors

;; line at bottom telling file name etc...
(copy-face 'bold 'modeline)
(set-face-foreground 'modeline "goldenrod")
(set-face-background 'modeline "midnight blue")



;; comments
(copy-face 'italic  'font-lock-comment-face)
;(set-face-foreground 'font-lock-comment-face "OrangeRed")
(set-face-foreground 'font-lock-comment-face "maroon1")
(set-face-background 'font-lock-comment-face "black")
(setq font-lock-comment-face 'font-lock-comment-face)


(copy-face 'default 'show-paren-mismatch-face)
(set-face-foreground 'show-paren-mismatch-face "black")
(set-face-background 'show-paren-mismatch-face "red")
(setq show-paren-mismatch-face 'show-paren-mismatch-face)

(copy-face 'default  'font-lock-emphasized-face)
(set-face-foreground 'font-lock-emphasized-face "blue")
(set-face-background 'font-lock-emphasized-face "black")
(setq font-lock-string-face 'font-lock-emphasized-face)

;; stuff in quotes
(copy-face 'italic  'font-lock-other-emphasized-face)
(set-face-foreground 'font-lock-other-emphasized-face "dodger blue")
(set-face-background 'font-lock-other-emphasized-face "black")
(setq font-lock-string-face 'font-lock-other-emphasized-face)

;; keywords (class, const, for, if, etc...)
(copy-face 'bold 'font-lock-keyword-face)
(set-face-foreground 'font-lock-keyword-face "yellow")
(set-face-background 'font-lock-keyword-face "black")
(setq font-lock-keyword-face 'font-lock-keyword-face)

;; function names
(copy-face 'bold 'font-lock-function-name-face)
(set-face-foreground 'font-lock-function-name-face "cyan")
(set-face-background 'font-lock-function-name-face "black")
(setq font-lock-function-name-face 'font-lock-function-name-face)

;; variable names
(copy-face 'default 'font-lock-variable-name-face)
(set-face-foreground 'font-lock-variable-name-face "green")
(set-face-background 'font-lock-variable-name-face "black")
(setq font-lock-variable-name-face 'font-lock-variable-name-face)

;; type colors (i.e. int, float, etc...)
(copy-face 'bold  'font-lock-type-face)
(set-face-foreground 'font-lock-type-face "goldenrod")
(set-face-background 'font-lock-type-face "black")
(setq font-lock-type-face 'font-lock-type-face)

;; ??
(copy-face 'bold  'font-lock-reference-face)
(set-face-foreground 'font-lock-reference-face "yellow")
(set-face-background 'font-lock-reference-face "Blue")
(setq font-lock-reference-face 'font-lock-reference-face)


(set-face-foreground 'highlight "yellow")
(set-face-background 'highlight "red")

;; highlighted region
(set-face-foreground 'region "yellow")
(set-face-background 'region "darkviolet")

(set-face-foreground 'secondary-selection "white")
(set-face-background 'secondary-selection "darkviolet")

(copy-face 'bold  'show-paren-match-face)
(set-face-foreground 'show-paren-match-face "yellow1")
(set-face-background 'show-paren-match-face "mediumorchid4")

(set-face-foreground 'show-paren-mismatch-face "yellow")
(set-face-background 'show-paren-mismatch-face "firebrick1")

;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; '(custom-enabled-themes (quote (deeper-blue))))
;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; )
